/*
 * VIA University College - School of Technology and Business
 * Software Engineering Program - 3rd Semester Project
 *
 * This work is a part of the academic curriculum for the Software Engineering program at VIA University College.
 * It is intended only for educational and academic purposes.
 *
 * No part of this project may be reproduced or transmitted in any form or by any means,
 * except as permitted by VIA University and the course instructor.
 * All rights reserved by the contributors and VIA University College.
 *
 * Project Name: Unrecorded
 * Author: Sergiu Chirap
 * Year: 2024
 */

package com.unrecorded.database.entities;

import com.unrecorded.database.util.MiscUtils;
import jakarta.persistence.*;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Objects;
import java.util.UUID;

/**
 * HibernateORM entity representing a user in the system.
 *
 * <p>This class maps to the "users" table in the "unrecorded" schema, keeping account information for the users
 * of the application.
 * Each user has a unique identifier, along with authentication credentials and communication details.</p>
 *
 * <p><b>Note:</b> This entity is a critical part of the database used for managing user-related operations,
 * including authentication and authorization.
 * It includes cryptographic keys for secure communication within the application.</p>
 *
 * <h2>Entity Relationships:</h2>
 * <ul>
 *   <li>Has a one-to-many relationship with {@code Messages}, where a user can send or receive multiple messages.</li>
 *   <li>Interacts with {@code Friendships} for managing user friendships.</li>
 *   <li>May participate in {@code Groups} as a member or admin.</li>
 *   <li>Subject to session tracking via the {@code Sessions} entity for managing user login statuses.</li>
 *   <li>Has reactions linked to messages via the {@code Reactions} entity.</li>
 *   <li>Receives notifications through the {@code Notifications} entity to be informed of system events and updates.</li>
 * </ul>
 *
 * @author Sergiu Chirap
 * @version 1.1
 * @see com.unrecorded.database.repositories.UserPSQL UserPSQL
 * @since PREVIEW
 */
@Entity
@Table(name = "users", schema = "unrecorded")
public class EUser {

    /**
     * Represents the unique identifier for a user.
     * <p>This ID is automatically generated by the database and is immutable post-creation.</p>
     */
    @Id
    @Column(name = "user_id", updatable = false, nullable = false)
    @Nullable
    private UUID id;

    /**
     * Represents the username for a user in the application.
     * <p>Usernames must be unique and are used for logging into the application.</p>
     */
    @Column(name = "username", nullable = false, unique = true)
    @NotNull
    private String username;

    /**
     * Stores the hashed representation of a user's password.
     * <p>Stored securely using cryptographic hashing techniques.</p>
     */
    @Column(name = "password_hash", nullable = false)
    @NotNull
    private String passHash;

    /**
     * Stores the cryptographic salt used in password hashing.
     * <p>This ensures that password hashes are unique even if the same password is used by different users.</p>
     */
    @Lob
    @Column(name = "password_salt", nullable = false)
    private byte[] salt;

    /**
     * Represents the email address associated with the user.
     * <p>Facilitates communication and recovery processes.</p>
     */
    @Column(name = "email", nullable = false, unique = true)
    @NotNull
    private String email;

    /**
     * Represents the public key associated with the user for cryptographic operations.
     * <p>Used for encrypting information sent to the user.</p>
     */
    @Column(name = "public_key", nullable = false, unique = true)
    @NotNull
    private String publicKey;

    /**
     * Represents an encrypted private key associated with the user.
     * <p>This key is crucial for decrypting data sent to the user.</p>
     */
    @Column(name = "private_key_encrypted", nullable = false)
    @NotNull
    private String privateKey;

    /**
     * Default constructor required by JPA for instantiation.
     */
    public EUser() {
    }

    /**
     * Constructs a new EUser instance with the specified details.
     *
     * @param username   The username of the user.
     * @param passHash   The password hash of the user.
     * @param salt       The salt used for password hashing.
     * @param email      The email address of the user.
     * @param publicKey  The public key of the user.
     * @param privateKey The encrypted private key of the user.
     */
    public EUser(@NotNull String username, @NotNull String passHash, byte[] salt,
                 @NotNull String email, @NotNull String publicKey, @NotNull String privateKey) {
        this.username = username;
        this.passHash = passHash;
        this.salt = salt;
        this.email = email;
        this.publicKey = publicKey;
        this.privateKey = privateKey;
    }

    /**
     * Retrieves the unique identifier of the user.
     *
     * @return The {@code UUID} representing the user's unique identifier. It may be null if not yet persisted.
     */
    public @Nullable UUID getId() {
        return id;
    }

    /**
     * Retrieves the username associated with the user.
     *
     * @return The username of the user.
     */
    public @NotNull String getUsername() {
        return username;
    }

    /**
     * Sets the username for the user.
     *
     * @param username The new username to be set.
     */
    public void setUsername(@NotNull String username) {
        this.username = username;
    }

    /**
     * Retrieves the password hash of the user.
     *
     * @return The password hash.
     */
    public @NotNull String getPassHash() {
        return passHash;
    }

    /**
     * Sets the password hash for the user.
     *
     * @param passHash The hashed password to be set for the user.
     */
    public void setPassHash(@NotNull String passHash) {
        this.passHash = passHash;
    }

    /**
     * Retrieves the salt used for the user's password hashing process.
     *
     * @return A byte array representing the salt.
     */
    public byte[] getSalt() {
        return salt;
    }

    /**
     * Sets the salt value for the user's password hashing process.
     *
     * @param salt The new salt as a byte array.
     */
    public void setSalt(byte[] salt) {
        this.salt = salt;
    }

    /**
     * Retrieves the email address associated with the user.
     *
     * @return The email address of the user.
     */
    public @NotNull String getEmail() {
        return email;
    }

    /**
     * Sets the email address for the user.
     *
     * @param email The new email address to be set.
     */
    public void setEmail(@NotNull String email) {
        this.email = email;
    }

    /**
     * Retrieves the public key associated with the user.
     *
     * @return The public key of the user.
     */
    public @NotNull String getPublicKey() {
        return publicKey;
    }

    /**
     * Sets the public key for the user.
     *
     * @param publicKey The new public key to be set.
     */
    public void setPublicKey(@NotNull String publicKey) {
        this.publicKey = publicKey;
    }

    /**
     * Retrieves the encrypted private key of the user.
     *
     * @return The encrypted private key.
     */
    public @NotNull String getPrivateKey() {
        return privateKey;
    }

    /**
     * Sets the encrypted private key for the user.
     *
     * @param privateKey The new encrypted private key to be set.
     */
    public void setPrivateKey(@NotNull String privateKey) {
        this.privateKey = privateKey;
    }

    /**
     * Compares this EUser object to the specified object to determine if they are equal.
     *
     * @param o The object to compare with this EUser instance.
     * @return True if the specified object is equal to this EUser, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EUser that)) return false;
        return Objects.equals(id, that.id) && Objects.equals(username, that.username) && Objects.equals(passHash, that.passHash) && Objects.equals(email, that.email) && Objects.equals(publicKey, that.publicKey) && Objects.equals(privateKey, that.privateKey);
    }

    /**
     * Computes the hash code for this object using its significant attributes.
     *
     * @return An integer representing the hash code of this object.
     */
    @Override
    public int hashCode() {
        return MiscUtils.hash(id, username, passHash, email, publicKey, privateKey);
    }

    /**
     * Returns a string representation of the User entity.
     *
     * @return A formatted string containing the username and email of the User.
     */
    @Override
    public String toString() {
        return String.format("// HibernateORM Entity 'User':\n Id: %s\n Username: %s\n Email: %s //\n", id, username, email);
    }
}